#!/usr/bin/env python3
# vim: set encoding=utf-8 tabstop=4 softtabstop=4 shiftwidth=4 expandtab
#
# Copyright 2012 KNX-User-Forum e.V.            http://knx-user-forum.de/
#
#  This file is part of SmartHome.py.    http://mknx.github.io/smarthome/
#
#  SmartHome.py is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  SmartHome.py is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with SmartHome.py.  If not, see <http://www.gnu.org/licenses/>.
#

import logging
import socket
import time
import base64
import logging
import socket
import time
import datetime
import base64
from base64 import urlsafe_b64encode as encode
from base64 import urlsafe_b64decode as decode
import hmac
import json
import binascii
import hashlib
from  urllib import request
import sys
import random
import re
from os import *
from mimetypes import MimeTypes
import struct
from uuid import getnode as getmac

logger = logging.getLogger('')


class LGSmartTV():
    #
    #SMarthomeNG FUnctions
    #
    def __init__(self, smarthome, host, port):
        self._sh = smarthome
        self._host = host
        self._port = port
        self._wskey = encode(self.generateRandomString(16, False, True))  # Websocket Handshake Code
        self._handshake = False
        self._connected = False
        self.connect()
        self.message("SmarthomeNG.py"+" YEAH, it works!!!")


#smarttv = true
#   smarttvfunk = Image , "http://xyz.de/123.png" , "text"
#
    def parse_item(self, item):
        if 'smarttv' in item.conf:
            logger.debug("Smart TV Item {0} with value {1} for TV found!".format(
                item, item.conf['smarttv'], item.conf['smarttvfunk']))
            return self.update_item
        else:
            return None

    def update_item(self, item, caller=None, source=None, dest=None):
        if isinstance(val, str):
            if val.startswith('KEY_'):
                self.push(val)
            return
        if item.conf['smarttvfunk']:
            if isinstance(item.conf['smarttvfunk'], list):
                keys = [item.conf['smarttvfunk']]
                self.command(keys)
            # keys ist ein array
                #funktions aufruf
                #


    def parse_logic(self, logic):
        pass

    def run(self):
        self.alive = True
        return None

    def stop(self):
        self.alive = False
        return None
    #
    #WEBOS Functions
    #
    #
    #Creates a Websocket Connection
    #
    def connect(self):
        ws_handshake_cmd = "GET {0} HTTP/1.1\r\n".format(self._path)
        ws_handshake_cmd += "Upgrade: websocket\r\n"
        ws_handshake_cmd += "Connection: Upgrade\r\n"
        ws_handshake_cmd += "Sec-WebSocket-Version: 13\r\n"
        ws_handshake_cmd += "Sec-WebSocket-Key: {0}\r\n".format(self._wskey)
        ws_handshake_cmd += "Host: {0}: {1}\r\n\r\n".format(self._host, self._port)

        try:
            self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self._sock.connect((self._host, self._port))
            self._sock.settimeout(20)
        except:
            print("Verbindung zu ", self._host, " nicht möglich!")

        print("Sending WS handshake", ws_handshake_cmd)
        response = self.send(ws_handshake_cmd, "ws")

        # Empfangenes prüfen und Key suchen
        if response == '':
            print("ERROR during WS handshake!")
            returnkey = ''
        else:
            print("WS Handshake Response:", response.decode('ascii'))
            matches = re.search('Sec-WebSocket-Accept:\s*(.*=)', response.decode('utf-8'))
            returnkey = matches.groups()
            returnkey = returnkey[0]
            #print("Match in response ",returnkey)

        #// Vergleich ob empfangener Key und generierter Key gleich sind
        key = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'
        keys = str("%s%s" % (self._wskey, key)).encode('utf-8')
        nonce = base64.b64encode(keys)
        pdigest = base64.b64encode(hashlib.sha1(keys).digest())
        pdigest = pdigest.decode('UTF-8')

        # print('return', returnkey, ' = ', pdigest)
        if returnkey != pdigest:
            self._connected = False
            #print("Key nicht Akzeptiert")
        else:
            self._connected = True
            #print("Key Akzeptiert")
            print("Sucessfull WS connection to", self._host, ": ", self._port)
        return self._connected
    def disconnect(self):
        self._connected = False
        self._sock.close()
        print("Connection closed to ",self._host)
        return None

 # //Websocket Connect

    #
    #DO Websocket Handshake
    #
    def lg_handshake(self):
        if self._connected == False:
            self.connect()
        else:
            handshake = "{\"type\":\"register\",\"id\":\"register_0\",\"payload\":{\"forcePairing\":false,\"pairingType\":\"PROMT\",\"manifest\":{\"manifestVersion\":1,\"appVersion\":\"1.1\",\"signed\":{\"created\":\"20140509\",\"appId\":\"com.lge.test\",\"vendorId\":\"com.lge\",\"localizedAppNames\":{\"\":\"LG Remote App\",\"ko-KR\":\"리모컨 앱\",\"zxx-XX\":\"ЛГ Rэмotэ AПП\"},\"localizedVendorNames\":{\"\":\"LG Electronics\"},\"permissions\":[\"TEST_SECURE\",\"CONTROL_INPUT_TEXT\",\"CONTROL_MOUSE_AND_KEYBOARD\",\"READ_INSTALLED_APPS\",\"READ_LGE_SDX\",\"READ_NOTIFICATIONS\",\"SEARCH\",\"WRITE_SETTINGS\",\"WRITE_NOTIFICATION_ALERT\",\"CONTROL_POWER\",\"READ_CURRENT_CHANNEL\",\"READ_RUNNING_APPS\",\"READ_UPDATE_INFO\",\"UPDATE_FROM_REMOTE_APP\",\"READ_LGE_TV_INPUT_EVENTS\",\"READ_TV_CURRENT_TIME\"],\"serial\":\"2f930e2d2cfe083771f68e4fe7bb07\"},\"permissions\":[\"LAUNCH\",\"LAUNCH_WEBAPP\",\"APP_TO_APP\",\"CLOSE\",\"TEST_OPEN\",\"TEST_PROTECTED\",\"CONTROL_AUDIO\",\"CONTROL_DISPLAY\",\"CONTROL_INPUT_JOYSTICK\",\"CONTROL_INPUT_MEDIA_RECORDING\",\"CONTROL_INPUT_MEDIA_PLAYBACK\",\"CONTROL_INPUT_TV\",\"CONTROL_POWER\",\"READ_APP_STATUS\",\"READ_CURRENT_CHANNEL\",\"READ_INPUT_DEVICE_LIST\",\"READ_NETWORK_STATE\",\"READ_RUNNING_APPS\",\"READ_TV_CHANNEL_LIST\",\"WRITE_NOTIFICATION_TOAST\",\"READ_POWER_STATE\",\"READ_COUNTRY_INFO\"],\"signatures\":[{\"signatureVersion\":1,\"signature\":\"eyJhbGdvcml0aG0iOiJSU0EtU0hBMjU2Iiwia2V5SWQiOiJ0ZXN0LXNpZ25pbmctY2VydCIsInNpZ25hdHVyZVZlcnNpb24iOjF9.hrVRgjCwXVvE2OOSpDZ58hR+59aFNwYDyjQgKk3auukd7pcegmE2CzPCa0bJ0ZsRAcKkCTJrWo5iDzNhMBWRyaMOv5zWSrthlf7G128qvIlpMT0YNY+n/FaOHE73uLrS/g7swl3/qH/BGFG2Hu4RlL48eb3lLKqTt2xKHdCs6Cd4RMfJPYnzgvI4BNrFUKsjkcu+WD4OO2A27Pq1n50cMchmcaXadJhGrOqH5YmHdOCj5NSHzJYrsW0HPlpuAx/ECMeIZYDh6RMqaFM2DXzdKX9NmmyqzJ3o/0lkk/N97gfVRLW5hA29yeAwaCViZNCP8iC9aO0q9fQojoa7NQnAtw==\"}]}}}"
            if self._tvkey != '':  #handshakecode vorhanden
                handshake = handshake.replace('HANDSHAKECODE', self._tvkey)
            else:  #handshakecode nicht vorhanden
                handshake = "{\"type\":\"register\",\"id\":\"register_0\",\"payload\":{\"forcePairing\":false,\"pairingType\":\"PROMT\",\"manifest\":{\"manifestVersion\":1,\"appVersion\":\"1.1\",\"signed\":{\"created\":\"20140509\",\"appId\":\"com.lge.test\",\"vendorId\":\"com.lge\",\"localizedAppNames\":{\"\":\"LG Remote App\",\"ko-KR\":\"리모컨 앱\",\"zxx-XX\":\"ЛГ Rэмotэ AПП\"},\"localizedVendorNames\":{\"\":\"LG Electronics\"},\"permissions\":[\"TEST_SECURE\",\"CONTROL_INPUT_TEXT\",\"CONTROL_MOUSE_AND_KEYBOARD\",\"READ_INSTALLED_APPS\",\"READ_LGE_SDX\",\"READ_NOTIFICATIONS\",\"SEARCH\",\"WRITE_SETTINGS\",\"WRITE_NOTIFICATION_ALERT\",\"CONTROL_POWER\",\"READ_CURRENT_CHANNEL\",\"READ_RUNNING_APPS\",\"READ_UPDATE_INFO\",\"UPDATE_FROM_REMOTE_APP\",\"READ_LGE_TV_INPUT_EVENTS\",\"READ_TV_CURRENT_TIME\"],\"serial\":\"2f930e2d2cfe083771f68e4fe7bb07\"},\"permissions\":[\"LAUNCH\",\"LAUNCH_WEBAPP\",\"APP_TO_APP\",\"CLOSE\",\"TEST_OPEN\",\"TEST_PROTECTED\",\"CONTROL_AUDIO\",\"CONTROL_DISPLAY\",\"CONTROL_INPUT_JOYSTICK\",\"CONTROL_INPUT_MEDIA_RECORDING\",\"CONTROL_INPUT_MEDIA_PLAYBACK\",\"CONTROL_INPUT_TV\",\"CONTROL_POWER\",\"READ_APP_STATUS\",\"READ_CURRENT_CHANNEL\",\"READ_INPUT_DEVICE_LIST\",\"READ_NETWORK_STATE\",\"READ_RUNNING_APPS\",\"READ_TV_CHANNEL_LIST\",\"WRITE_NOTIFICATION_TOAST\",\"READ_POWER_STATE\",\"READ_COUNTRY_INFO\"],\"signatures\":[{\"signatureVersion\":1,\"signature\":\"eyJhbGdvcml0aG0iOiJSU0EtU0hBMjU2Iiwia2V5SWQiOiJ0ZXN0LXNpZ25pbmctY2VydCIsInNpZ25hdHVyZVZlcnNpb24iOjF9.hrVRgjCwXVvE2OOSpDZ58hR+59aFNwYDyjQgKk3auukd7pcegmE2CzPCa0bJ0ZsRAcKkCTJrWo5iDzNhMBWRyaMOv5zWSrthlf7G128qvIlpMT0YNY+n/FaOHE73uLrS/g7swl3/qH/BGFG2Hu4RlL48eb3lLKqTt2xKHdCs6Cd4RMfJPYnzgvI4BNrFUKsjkcu+WD4OO2A27Pq1n50cMchmcaXadJhGrOqH5YmHdOCj5NSHzJYrsW0HPlpuAx/ECMeIZYDh6RMqaFM2DXzdKX9NmmyqzJ3o/0lkk/N97gfVRLW5hA29yeAwaCViZNCP8iC9aO0q9fQojoa7NQnAtw==\"}]}}}"
                print("Sending LG handshake", handshake)

            response = self.send(handshake, '')
            print('RAW response nach handshake', response)

            if response != '':
                result = self.json_string(response)
                print("LG Handshake Response", result)
                if 'id' in result.keys() and result['id'] == 'result_0' and 'client-key' in result['payload'].keys():
                    #// LG client-key received: COMPARE!!!
                    if self._lg_key == result['payload']['client-key']:
                        print("LG Client-Key successfully approved")
                elif result and 'id' in result.keys() and result['id'] == 'register_0' and 'pairingType' in result['payload'].keys() and 'returnValue' in result['payload'].keys():
                    start = self.timestopp()
                    lg_key_received = False
                    error_received = False

                    while (self.timestopp()- start < 60 and not lg_key_received and not error_received):

                        response = self._sock.recv(8192)
                        print('HANDSHAKE RESPONSE ', response)
                        result = self.json_string(response)
                        if 'id' in result and result['id'] == 'register_0' and ('client-key' in result['payload']):
                            lg_key_received = True
                            self._lg_key = result['payload']['client-key']
                            print("LG Client-Key successfully received:", self._lg_key)
                        elif ('id' in result) and result['id'] == 'register_0' and ('error' in result):
                            error_received = True
                            print("ERROR: ", result['error'])
                       # time.sleep(2)
            else:
                print("ERROR during LG handshake:")
    #
    #Send Message to the TV
    #
    def send(self, msg, funktion):
        msg = msg.encode()
        if funktion != "ws":
            msg = self.hybi10Encode(msg)
        #print("Send Funktion message", msg)
        self._sock.send(msg)
        response = self._sock.recv(8192)  #.encode('ascii').strip()
        return response

    #
    #Create Random String for Websocket Connection
    #
    def generateRandomString(self, length=10, addSpaces=True, addNumbers=True):
        characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"Â§$%&/()=[]{}'
        useChars = []
        #// select some random chars:
        for i in range(0, length):
            useChars.append(characters[random.randint(0, len(characters) - 1)])

        #// add spaces and numbers:
        if (addSpaces == True):
            useChars.append(' ', ' ', ' ', ' ', ' ', ' ')

        if (addNumbers == True):
            useChars.append(random.randint(0, 9))
            useChars.append(random.randint(0, 9))
            useChars.append(random.randint(0, 9))

        random.shuffle(useChars)
        randomString = ''.join([str(i) for i in useChars])
        randomString = randomString.strip(' \t\n\r')
        randomString = randomString[0:length]

        return str(randomString).encode('utf-8')

    #
    #Encode WebsocketMessages to TV in hybi-10
    #
    def hybi10Encode(self, payload, type='text', masked=True):  # masked = True):
        frameHead = []
        payloadLength = len(payload)
        #payload = str(payload).encode('utf-8')

        #FRAMEHEAD
        ##Fin + RSV + TYPE
        if type == 'text':
            #// first byte indicates FIN, Text-Frame (10000001):
            frameHead.append(129)  #struct.pack('>B', 129)#129
        elif type == 'close':
            #// first byte indicates FIN, Close Frame(10001000):
            frameHead.append(136)  #struct.pack('>B', 136)#136
        elif type == 'ping':
            #// first byte indicates FIN, Ping frame (10001001):
            frameHead.append(137)  #struct.pack('>B', 137)
        elif type == 'pong':
            #// first byte indicates FIN, Pong frame (10001010):
            frameHead.append(138)  #struct.pack('>B', 138) #138

        ##set masking and payload length (using 1, 3 or 9 bytes)
        ###
        if (payloadLength > 65535):
            payloadLengthBin = struct.pack('>H', payloadLength)

            #1
            if masked == True:
                frameHead.append(255)  #struct.pack('>B', 255)
            else:
                frameHead.append(127)  #struct.pack('>B', 127)

            frameHead.append(int(payloadLengthBin[0]))  #2
            frameHead.append(int(payloadLengthBin[1]))  #3

            #// most significant bit MUST be 0 (close connection if frame too big)
            if (frameHead[2] > 127):
                self.close(1004)
                return False

        elif payloadLength > 125 and payloadLength < 65536:
            payloadLengthBin = struct.pack('>H', payloadLength)
            #print('mittlerer payloadfall', payloadLengthBin,payloadLengthBin[0], payloadLengthBin[1])

            if masked == True:
                frameHead.append(254)  #struct.pack('>B', 254)
            else:
                frameHead.append(126)  #struct.pack('>B', 126)
                #
            frameHead.append(int(payloadLengthBin[0]))  #struct.pack('>B', payloadLengthBin[0]) #2
            frameHead.append(int(payloadLengthBin[1]))  #struct.pack('>B', payloadLengthBin[1]) #3

        else:  #<=125
            if masked == True:
                frameHead.append(int(payloadLength + 128))#1
            else:
                frameHead.append(int(payloadLength))


        ##// Masking the framehead
        if masked == True:
            #// generate a random mask:
            mask = []
            for i in range(0, 4):
                mask.append(int(random.randint(0, 255)))

        ##//PAYLOADDATA
        payloaddata = []
        #print(payloadLength)
        for i in range(0, payloadLength):
            if masked == True:
                #print(chr(payload[i]), i)
                payloaddata.append(int(payload[i]) ^ int(mask[i % 4]))
            else:
                payloaddata.append(int(payload[i]))

        #|framehead|maskstr|payload^mask[i%4]
        frame = []
        frame.extend(frameHead)
        frame.extend(mask)
        frame.extend(payloaddata)

        #if self.debug == True:
        #print('framehead', frameHead)
        #print('mask', mask)
        #print('payloaddata', payloaddata)
         #   print('alle daten ', frame)

        # #// convert frame-head to string:###########################################################################
        #framehead+lenght+masking+data
        return bytes(frame)

    #
    # Send Commands to the TV
    #
    def send_command(self, cmd):
        if self._connected == False:
            self.connect()
        else:
            print("Sending command:", cmd)
            cmd = str(cmd).encode()
            cmd = self.hybi10Encode(cmd)
            #print('response von hyb10 encoder', cmd)
            self._sock.send(cmd)
            #print('response von send command', response)
            response = self._sock.recv(8192)
            if (response):
                responsedict = self.json_string(response)
                if "error" in responsedict.keys():
                    print("ERROR:" ,responsedict['error'], ", by id", responsedict['id'])
                    print("by this Command:", cmd)
                    #print("Command response:", response.decode('latin-1'))
            else:
                print("No Data Recieved! Error sending command:", cmd)
            return response

    #
    #Return a JSon String
    #
    def json_string(self, str):
        matches = re.search('({.*})', str.decode('latin-1'))
        str = matches.groups()
        print('JSON String ', str)
        result = json.loads(str[0])
        return result

    #
    # Returns the Current Time
    #
    def timestopp(self):
        return time.time()

    #
    #Command aus item extrahieren und unterfunktion aufrufen 
    #
    def command(self, command):
        return None
    SmartTVfunc = {'set_vol': ['set_volume', 'request', 'ssap://audio/setVolume', '{"volume":"'+ str(vol) +'"}'],
                    'poweroff': ['power_off','request','ssap://system/turnOff', None],
                    'get_vol': ['status_vol','request','ssap://audio/getVolume', None],
                    'btn_play': ['btn_play','request','ssap://media.controls/play', None],
                    'btn_stop': ['btn_stop','request','ssap://media.controls/stop', None],
                    'btn_pause': ['btn_pause','request','ssap://media.controls/pause', None],
                    'btn_rewind': ['btn_rewind','request','ssap://media.controls/rewind', None],
                    'btn_forward': ['btn_forward','request','ssap://media.controls/forward', None],
                    'btn_channelup': ['btn_channelup','request','ssap://tv/channelUp', None],
                    'btn_channeldown': ['btn_channeldown','request','ssap://tv/channelDown', None]
                   }
    def create_command(self, id, type, uri, payload, url='', text= '' ):
        return None
